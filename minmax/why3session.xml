<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.4.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="4.8.12" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC5" version="1.1.2" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="minmax.mlw"/>
<theory name="Top" proved="true">
 <goal name="int63_min&#39;vc" expl="VC for int63_min" proved="true">
 <proof prover="0"><result status="valid" time="0.000001" steps="15"/></proof>
 <proof prover="3" timelimit="10" memlimit="1500"><result status="valid" time="0.039072" steps="3341"/></proof>
 </goal>
 <goal name="int63_max&#39;vc" expl="VC for int63_max" proved="true">
 <proof prover="0"><result status="valid" time="0.013805" steps="15"/></proof>
 <proof prover="3" timelimit="10" memlimit="1500"><result status="valid" time="0.024669" steps="3593"/></proof>
 </goal>
 <goal name="height&#39;vc" expl="VC for height" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="height&#39;vc.0" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="height&#39;vc.0.0" expl="variant decrease" proved="true">
   <proof prover="0" timelimit="10" memlimit="1500"><result status="valid" time="0.010694" steps="13"/></proof>
   <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.045726" steps="8719"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="height&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="height&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="0" timelimit="10" memlimit="1500"><result status="valid" time="0.019292" steps="9"/></proof>
   <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.036551" steps="7682"/></proof>
   </goal>
   <goal name="height&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="0" timelimit="10" memlimit="1500"><result status="valid" time="0.000001" steps="10"/></proof>
   <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.047555" steps="8089"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="height_list&#39;vc" expl="VC for height_list" proved="true">
 <proof prover="0"><result status="valid" time="0.011453" steps="118"/></proof>
 <proof prover="3" timelimit="10" memlimit="1500"><result status="valid" time="0.050962" steps="6507"/></proof>
 </goal>
 <goal name="height_list_max&#39;vc" expl="VC for height_list_max" proved="true">
 <proof prover="0"><result status="valid" time="0.011442" steps="200"/></proof>
 <proof prover="3" timelimit="10" memlimit="1500"><result status="valid" time="0.067590" steps="9675"/></proof>
 </goal>
 <goal name="minmax&#39;&#39;vc" expl="VC for minmax&#39;" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="minmax&#39;&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.010621" steps="17"/></proof>
  <proof prover="3" timelimit="10" memlimit="1500"><result status="valid" time="0.043692" steps="8181"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="minmax&#39;_list&#39;vc" expl="VC for minmax&#39;_list" proved="true">
 <proof prover="0"><result status="valid" time="0.013801" steps="99"/></proof>
 <proof prover="3" timelimit="10" memlimit="1500"><result status="valid" time="0.033784" steps="7554"/></proof>
 </goal>
 <goal name="minmax&#39;_list_max_in&#39;vc" expl="VC for minmax&#39;_list_max_in" proved="true">
 <proof prover="0"><result status="valid" time="0.107580" steps="1195"/></proof>
 <proof prover="3" timelimit="10" memlimit="1500"><result status="valid" time="0.298472" steps="30783"/></proof>
 </goal>
 <goal name="minmax&#39;_list_min_in&#39;vc" expl="VC for minmax&#39;_list_min_in" proved="true">
 <proof prover="0"><result status="valid" time="0.117410" steps="1128"/></proof>
 <proof prover="3" timelimit="10" memlimit="1500"><result status="valid" time="0.245199" steps="29296"/></proof>
 </goal>
 <goal name="mimax&#39;_list_max&#39;vc" expl="VC for mimax&#39;_list_max" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mimax&#39;_list_max&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.017268" steps="68"/></proof>
  <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.100874" steps="15183"/></proof>
  </goal>
  <goal name="mimax&#39;_list_max&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.018816" steps="68"/></proof>
  <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.098945" steps="15223"/></proof>
  </goal>
  <goal name="mimax&#39;_list_max&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mimax&#39;_list_max&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.017805" steps="24"/></proof>
   <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.071493" steps="13918"/></proof>
   </goal>
   <goal name="mimax&#39;_list_max&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="0" timelimit="10" memlimit="1500"><result status="valid" time="0.381033" steps="3109"/></proof>
   <proof prover="3" timelimit="10" memlimit="1500"><result status="valid" time="0.653523" steps="53608"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mimax&#39;_list_min&#39;vc" expl="VC for mimax&#39;_list_min" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mimax&#39;_list_min&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.022898" steps="68"/></proof>
  <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.069777" steps="15504"/></proof>
  </goal>
  <goal name="mimax&#39;_list_min&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.024592" steps="68"/></proof>
  <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.079783" steps="15544"/></proof>
  </goal>
  <goal name="mimax&#39;_list_min&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mimax&#39;_list_min&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.024915" steps="24"/></proof>
   <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.052854" steps="14154"/></proof>
   </goal>
   <goal name="mimax&#39;_list_min&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="0" timelimit="10" memlimit="1500"><result status="valid" time="0.436369" steps="3893"/></proof>
   <proof prover="3" timelimit="10" memlimit="1500"><result status="valid" time="0.240970" steps="29376"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="minmax&#39;_list_upper_extend_true" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="minmax&#39;_list_upper_extend_true.0" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="minmax&#39;_list_upper_extend_true.0.0" proved="true">
   <proof prover="0" timelimit="10" memlimit="1500"><result status="valid" time="0.622292" steps="6105"/></proof>
   <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.214194" steps="39067"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="minmax&#39;_list_upper_extend_false" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="minmax&#39;_list_upper_extend_false.0" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="minmax&#39;_list_upper_extend_false.0.0" proved="true">
   <proof prover="0" timelimit="10" memlimit="1500"><result status="valid" time="0.774577" steps="7000"/></proof>
   <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.230589" steps="39354"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="minmax&#39;_list_lower_extend_true" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="minmax&#39;_list_lower_extend_true.0" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="minmax&#39;_list_lower_extend_true.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="minmax&#39;_list_lower_extend_true.0.0.0" proved="true">
    <proof prover="0" timelimit="10" memlimit="1500"><result status="valid" time="0.172830" steps="1253"/></proof>
    <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.160126" steps="31128"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="minmax&#39;_list_lower_extend_false" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="minmax&#39;_list_lower_extend_false.0" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="minmax&#39;_list_lower_extend_false.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="minmax&#39;_list_lower_extend_false.0.0.0" proved="true">
    <proof prover="0" timelimit="10" memlimit="1500"><result status="valid" time="0.148869" steps="1353"/></proof>
    <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.150475" steps="31468"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="minmax&#39;_list_extendscore_true&#39;vc" expl="VC for minmax&#39;_list_extendscore_true" proved="true">
 <proof prover="0"><result status="valid" time="0.072333" steps="895"/></proof>
 <proof prover="2"><result status="valid" time="0.101494" steps="47858"/></proof>
 </goal>
 <goal name="minmax&#39;_list_extendscore_false&#39;vc" expl="VC for minmax&#39;_list_extendscore_false" proved="true">
 <proof prover="0"><result status="valid" time="0.227335" steps="1494"/></proof>
 <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.469237" steps="82255"/></proof>
 </goal>
 <goal name="minmax&#39;_list_infscore_true&#39;vc" expl="VC for minmax&#39;_list_infscore_true" proved="true">
 <proof prover="0"><result status="valid" time="0.596961" steps="6791"/></proof>
 <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="3.366883" steps="1173646"/></proof>
 </goal>
 <goal name="minmax&#39;_list_supscore_false&#39;vc" expl="VC for minmax&#39;_list_supscore_false" proved="true">
 <proof prover="0"><result status="valid" time="0.691234" steps="6816"/></proof>
 <proof prover="3" timelimit="10" memlimit="1500"><result status="valid" time="0.675583" steps="68831"/></proof>
 </goal>
 <goal name="minmax&#39;_list_rev_l&#39;vc" expl="VC for minmax&#39;_list_rev_l" proved="true">
 <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,min,max,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,(!),is_nil,length,mem,is_none,hd,tl,(++),reverse,fold_left,int63_min,int63_max,sub_list,height,height_list,minmax&#39;,minmax&#39;_list,minmax&#39;_list_upper_bound,minmax&#39;_list_lower_bound,minmax&#39;_upper_bound,minmax&#39;_lower_bound,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Min_r,Max_l,Min_comm,Max_comm,Min_assoc,Max_assoc,Div_mod,Div_bound,Mod_bound,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_1,Mod_1,Div_inf,Mod_inf,Div_mult,Mod_mult,to_int_in_bounds,max_int&#39;def,min_int&#39;def,is_nil&#39;spec,Length_nonnegative,Length_nil,is_none&#39;spec,Append_assoc,Append_l_nil,Append_length,mem_append,mem_decomp,reverse_append,reverse_cons,cons_reverse,Reverse_length,fold_left_append,int63_min&#39;spec,int63_min&#39;spec&#39;0,int63_max&#39;spec,int63_max&#39;spec&#39;0,height_list&#39;spec,height&#39;spec,height_list_max,minmax&#39;_list_upper_extend_true,minmax&#39;_list_upper_extend_false,minmax&#39;_list_lower_extend_true,minmax&#39;_list_lower_extend_false,minmax&#39;_list_extendscore_true,minmax&#39;_list_extendscore_false,minmax&#39;_list_infscore_true,minmax&#39;_list_supscore_false">
  <goal name="minmax&#39;_list_rev_l&#39;vc.0" expl="VC for minmax&#39;_list_rev_l" proved="true">
  <proof prover="1" timelimit="0.01206"><path name="minmax-Top-minmaxqt_list_rev_lqtvc_1.smt2"/><result status="valid" time="0.017890" steps="20496"/></proof>
  <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.051368" steps="9486"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="minmax&#39;_list_min_int_lower_bound&#39;vc" expl="VC for minmax&#39;_list_min_int_lower_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="minmax&#39;_list_min_int_lower_bound&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.020690" steps="117"/></proof>
  <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.128378" steps="26613"/></proof>
  </goal>
  <goal name="minmax&#39;_list_min_int_lower_bound&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.023901" steps="140"/></proof>
  <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.142689" steps="29858"/></proof>
  </goal>
  <goal name="minmax&#39;_list_min_int_lower_bound&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="minmax&#39;_list_min_int_lower_bound&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.027753" steps="18"/></proof>
   <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.096692" steps="25109"/></proof>
   </goal>
   <goal name="minmax&#39;_list_min_int_lower_bound&#39;vc.2.1" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="minmax&#39;_list_min_int_lower_bound&#39;vc.2.1.0" expl="postcondition" proved="true">
    <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.133336" steps="33339"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="minmax&#39;_list_min_int_lower_bound&#39;vc.2.2" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="minmax&#39;_list_min_int_lower_bound&#39;vc.2.2.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="minmax&#39;_list_min_int_lower_bound&#39;vc.2.2.0.0" expl="postcondition" proved="true">
     <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.218198" steps="48316"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="minmax&#39;_list_max_int_lower_bound&#39;vc" expl="VC for minmax&#39;_list_max_int_lower_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="minmax&#39;_list_max_int_lower_bound&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.036512" steps="115"/></proof>
  <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.141768" steps="26782"/></proof>
  </goal>
  <goal name="minmax&#39;_list_max_int_lower_bound&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.032538" steps="137"/></proof>
  <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.144814" steps="30044"/></proof>
  </goal>
  <goal name="minmax&#39;_list_max_int_lower_bound&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="minmax&#39;_list_max_int_lower_bound&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.019789" steps="18"/></proof>
   <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.119394" steps="25272"/></proof>
   </goal>
   <goal name="minmax&#39;_list_max_int_lower_bound&#39;vc.2.1" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="minmax&#39;_list_max_int_lower_bound&#39;vc.2.1.0" expl="postcondition" proved="true">
    <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.299906" steps="56627"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="minmax&#39;_list_max_int_lower_bound&#39;vc.2.2" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="minmax&#39;_list_max_int_lower_bound&#39;vc.2.2.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="minmax&#39;_list_max_int_lower_bound&#39;vc.2.2.0.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="minmax&#39;_list_max_int_lower_bound&#39;vc.2.2.0.0.0" expl="postcondition" proved="true">
      <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="1.274386" steps="176453"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="minmax&#39;_spec&#39;vc" expl="VC for minmax&#39;_spec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="minmax&#39;_spec&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.015580" steps="18"/></proof>
  <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.146062" steps="23858"/></proof>
  </goal>
  <goal name="minmax&#39;_spec&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="minmax&#39;_spec&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="minmax&#39;_spec&#39;vc.1.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="10" memlimit="1500"><result status="valid" time="0.014080" steps="98"/></proof>
    <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.134470" steps="33681"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="minmax&#39;_spec&#39;vc.1.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="minmax&#39;_spec&#39;vc.1.1.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.025218" steps="68"/></proof>
    <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.148028" steps="25943"/></proof>
    </goal>
    <goal name="minmax&#39;_spec&#39;vc.1.1.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="minmax&#39;_spec&#39;vc.1.1.1.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.097105" steps="819"/></proof>
     <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.137273" steps="28227"/></proof>
     </goal>
     <goal name="minmax&#39;_spec&#39;vc.1.1.1.1" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.084703" steps="826"/></proof>
     <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.152359" steps="28242"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="minmax&#39;_list_spec&#39;vc" expl="VC for minmax&#39;_list_spec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="minmax&#39;_list_spec&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.021788" steps="49"/></proof>
  <proof prover="3"><result status="valid" time="0.027221" steps="16470"/></proof>
  </goal>
  <goal name="minmax&#39;_list_spec&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.019682" steps="172"/></proof>
  <proof prover="3"><result status="valid" time="0.029339" steps="18993"/></proof>
  </goal>
  <goal name="minmax&#39;_list_spec&#39;vc.2" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.021423" steps="174"/></proof>
  <proof prover="3"><result status="valid" time="0.030082" steps="18993"/></proof>
  </goal>
  <goal name="minmax&#39;_list_spec&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="minmax&#39;_list_spec&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="minmax&#39;_list_spec&#39;vc.3.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.022697" steps="48"/></proof>
    <proof prover="3"><result status="valid" time="0.052304" steps="19203"/></proof>
    </goal>
    <goal name="minmax&#39;_list_spec&#39;vc.3.0.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="minmax&#39;_list_spec&#39;vc.3.0.1.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="minmax&#39;_list_spec&#39;vc.3.0.1.0.0" expl="postcondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="minmax&#39;_list_spec&#39;vc.3.0.1.0.0.0" expl="postcondition" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="minmax&#39;_list_spec&#39;vc.3.0.1.0.0.0.0" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="minmax&#39;_list_spec&#39;vc.3.0.1.0.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="1"><result status="valid" time="0.032688" steps="133287"/></proof>
         <proof prover="3"><result status="valid" time="0.111742" steps="30906"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="minmax&#39;_list_spec&#39;vc.3.0.1.0.0.0.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="minmax&#39;_list_spec&#39;vc.3.0.1.0.0.0.1.0" expl="postcondition" proved="true">
         <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),in_bounds,(!),is_none,hd,tl,reverse,fold_left,int63_min,int63_max,sub_list,height,height_list,minmax&#39;_list_lower_bound,minmax&#39;_upper_bound,minmax&#39;_lower_bound,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,ZeroLessOne,CompatOrderAdd,extensionality,Append_l_nil,mem_decomp,reverse_append,reverse_cons,cons_reverse,reverse_reverse,Reverse_length,fold_left_append,int63_min&#39;spec&#39;0,int63_max&#39;spec&#39;0,height_list&#39;spec,height&#39;spec,height_list_max,minmax&#39;_list_upper_extend_true,minmax&#39;_list_upper_extend_false,minmax&#39;_list_lower_extend_true,minmax&#39;_list_lower_extend_false,minmax&#39;_list_extendscore_true,minmax&#39;_list_extendscore_false,minmax&#39;_list_infscore_true,minmax&#39;_list_supscore_false,minmax&#39;_list_rev_l,minmax&#39;_list_min_int_lower_bound,minmax&#39;_list_max_int_lower_bound,H13,H9,H8,Ensures,H7,mem_append1,mem_append,reverse_mem1,reverse_mem,is_none&#39;spec1,is_none&#39;spec,int63_min&#39;spec1,int63_min&#39;spec,int63_max&#39;spec1,int63_max&#39;spec">
          <goal name="minmax&#39;_list_spec&#39;vc.3.0.1.0.0.0.1.0.0" expl="postcondition" proved="true">
          <proof prover="0" timelimit="10" memlimit="1500"><result status="valid" time="0.474523" steps="4103"/></proof>
          <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.133352" steps="20342"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="minmax&#39;_list_spec&#39;vc.3.0.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="minmax&#39;_list_spec&#39;vc.3.0.1.1.0" expl="postcondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="minmax&#39;_list_spec&#39;vc.3.0.1.1.0.0" expl="postcondition" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="minmax&#39;_list_spec&#39;vc.3.0.1.1.0.0.0" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="minmax&#39;_list_spec&#39;vc.3.0.1.1.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="0" timelimit="5"><result status="valid" time="0.223601" steps="3017"/></proof>
         <proof prover="3"><result status="valid" time="0.078480" steps="24989"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="minmax&#39;_list_spec&#39;vc.3.0.1.1.0.0.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="minmax&#39;_list_spec&#39;vc.3.0.1.1.0.0.1.0" expl="postcondition" proved="true">
         <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),min,max,one,(!),is_none,hd,tl,(++),reverse,fold_left,int63_min,int63_max,sub_list,height,height_list,minmax&#39;_list_lower_bound,minmax&#39;_upper_bound,minmax&#39;_lower_bound,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Max_comm,Min_assoc,Mod_1,Mod_mult,max_int&#39;def,mem_decomp,reverse_append,reverse_cons,cons_reverse,reverse_reverse,Reverse_length,fold_left_append,int63_min&#39;spec&#39;0,int63_max&#39;spec&#39;0,height_list&#39;spec,mimax&#39;_list_max,mimax&#39;_list_min,minmax&#39;_list_upper_extend_true,minmax&#39;_list_upper_extend_false,minmax&#39;_list_lower_extend_true,minmax&#39;_list_lower_extend_false,minmax&#39;_list_extendscore_true,minmax&#39;_list_extendscore_false,minmax&#39;_list_infscore_true,minmax&#39;_list_supscore_false,minmax&#39;_list_rev_l,minmax&#39;_list_min_int_lower_bound,minmax&#39;_list_max_int_lower_bound,H11,H9,H2,is_nil&#39;spec,mem_append1,mem_append,reverse_mem1,reverse_mem,is_none&#39;spec1,is_none&#39;spec,int63_min&#39;spec1,int63_min&#39;spec,int63_max&#39;spec1,int63_max&#39;spec">
          <goal name="minmax&#39;_list_spec&#39;vc.3.0.1.1.0.0.1.0.0" expl="postcondition" proved="true">
          <proof prover="0" timelimit="10" memlimit="1500"><result status="valid" time="5.694933" steps="85358"/></proof>
          <proof prover="2" timelimit="10" memlimit="1500"><result status="valid" time="0.099153" steps="20952"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="minmax&#39;_list_spec&#39;vc.3.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="minmax&#39;_list_spec&#39;vc.3.1.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="minmax&#39;_list_spec&#39;vc.3.1.0.0" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="minmax&#39;_list_spec&#39;vc.3.1.0.0.0" expl="postcondition" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="minmax&#39;_list_spec&#39;vc.3.1.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="1"><result status="valid" time="0.013928" steps="8381"/></proof>
       <proof prover="3"><result status="valid" time="0.044962" steps="18887"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="minmax&#39;_list_spec&#39;vc.3.1.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="minmax&#39;_list_spec&#39;vc.3.1.1.0" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="minmax&#39;_list_spec&#39;vc.3.1.1.0.0" expl="postcondition" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="minmax&#39;_list_spec&#39;vc.3.1.1.0.0.0" expl="postcondition" proved="true">
       <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,min,max,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,(!),is_nil,length,mem,is_none,hd,tl,(++),reverse,fold_left,int63_min,int63_max,sub_list,height,height_list,minmax&#39;_list_upper_bound,minmax&#39;_list_lower_bound,minmax&#39;_upper_bound,minmax&#39;_lower_bound,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_pos,Min_r,Max_l,Min_comm,Max_comm,Min_assoc,Max_assoc,Div_mod,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_1,Mod_1,Div_inf,Mod_inf,Div_mult,Mod_mult,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,Length_nonnegative,Append_assoc,Append_l_nil,Append_length,mem_decomp,reverse_append,reverse_cons,cons_reverse,reverse_reverse,Reverse_length,fold_left_append,int63_min&#39;spec&#39;0,int63_max&#39;spec&#39;0,height_list&#39;spec,height&#39;spec,height_list_max,mimax&#39;_list_max,minmax&#39;_list_upper_extend_true,minmax&#39;_list_upper_extend_false,minmax&#39;_list_lower_extend_true,minmax&#39;_list_lower_extend_false,minmax&#39;_list_extendscore_true,minmax&#39;_list_extendscore_false,minmax&#39;_list_infscore_true,minmax&#39;_list_supscore_false,minmax&#39;_list_rev_l,minmax&#39;_list_min_int_lower_bound,minmax&#39;_list_max_int_lower_bound,H4,H3,Ensures2,H2,H1,H,H9,H8,H7,H6,Abs_le2,Abs_le1,Abs_le,Div_bound1,Div_bound,Mod_bound1,Mod_bound,is_nil&#39;spec1,is_nil&#39;spec,Length_nil1,Length_nil,mem_append2,mem_append1,mem_append,reverse_mem1,reverse_mem,is_none&#39;spec1,is_none&#39;spec,int63_min&#39;spec1,int63_min&#39;spec,int63_max&#39;spec1,int63_max&#39;spec,minmax&#39;_list_max_in,minmax&#39;_list_min_in1,minmax&#39;_list_min_in,Ensures1,Ensures">
        <goal name="minmax&#39;_list_spec&#39;vc.3.1.1.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="0" timelimit="10" memlimit="1500"><result status="valid" time="0.022584" steps="72"/></proof>
        <proof prover="3" timelimit="0.040407"><result status="valid" time="0.042478"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="minmax&#39;_list_spec&#39;vc.3.1.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="minmax&#39;_list_spec&#39;vc.3.1.1.1.0" expl="postcondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="minmax&#39;_list_spec&#39;vc.3.1.1.1.0.0" expl="postcondition" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="minmax&#39;_list_spec&#39;vc.3.1.1.1.0.0.0" expl="postcondition" proved="true">
        <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,min,max,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,(!),is_nil,length,mem,is_none,hd,tl,(++),reverse,fold_left,int63_min,int63_max,sub_list,height,height_list,minmax&#39;_list_upper_bound,minmax&#39;_list_lower_bound,minmax&#39;_upper_bound,minmax&#39;_lower_bound,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_pos,Min_r,Max_l,Min_comm,Max_comm,Min_assoc,Max_assoc,Div_mod,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_1,Mod_1,Div_inf,Mod_inf,Div_mult,Mod_mult,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,Length_nonnegative,Append_assoc,Append_l_nil,Append_length,mem_decomp,reverse_append,reverse_cons,cons_reverse,reverse_reverse,Reverse_length,fold_left_append,int63_min&#39;spec&#39;0,int63_max&#39;spec&#39;0,height_list&#39;spec,height&#39;spec,height_list_max,mimax&#39;_list_min,minmax&#39;_list_upper_extend_true,minmax&#39;_list_upper_extend_false,minmax&#39;_list_lower_extend_true,minmax&#39;_list_lower_extend_false,minmax&#39;_list_extendscore_true,minmax&#39;_list_extendscore_false,minmax&#39;_list_infscore_true,minmax&#39;_list_supscore_false,minmax&#39;_list_rev_l,minmax&#39;_list_min_int_lower_bound,minmax&#39;_list_max_int_lower_bound,H7,H6,Ensures,H5,H3,H12,H11,H10,H9,H2,Abs_le2,Abs_le1,Abs_le,Div_bound1,Div_bound,Mod_bound1,Mod_bound,is_nil&#39;spec1,is_nil&#39;spec,Length_nil1,Length_nil,mem_append2,mem_append1,mem_append,reverse_mem1,reverse_mem,is_none&#39;spec1,is_none&#39;spec,int63_min&#39;spec1,int63_min&#39;spec,int63_max&#39;spec1,int63_max&#39;spec,minmax&#39;_list_max_in,minmax&#39;_list_min_in">
         <goal name="minmax&#39;_list_spec&#39;vc.3.1.1.1.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="0" timelimit="10" memlimit="1500"><result status="valid" time="0.025101" steps="83"/></proof>
         <proof prover="3" timelimit="10" memlimit="1500"><result status="valid" time="0.064325" steps="7485"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="minmax&#39;vc" expl="VC for minmax" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="minmax&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.010378" steps="79"/></proof>
  <proof prover="3"><result status="valid" time="0.053602" steps="22186"/></proof>
  </goal>
  <goal name="minmax&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.019130" steps="116"/></proof>
  <proof prover="3"><result status="valid" time="0.019489" steps="19306"/></proof>
  </goal>
  <goal name="minmax&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.014752" steps="112"/></proof>
  <proof prover="3"><result status="valid" time="0.059666" steps="24795"/></proof>
  </goal>
  <goal name="minmax&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.038907" steps="154855"/></proof>
  <proof prover="3"><result status="valid" time="0.037998" steps="22445"/></proof>
  </goal>
  <goal name="minmax&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.018074" steps="26"/></proof>
  <proof prover="3"><result status="valid" time="0.050484" steps="20219"/></proof>
  </goal>
  <goal name="minmax&#39;vc.5" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.018174" steps="79"/></proof>
  <proof prover="3"><result status="valid" time="0.066351" steps="22192"/></proof>
  </goal>
  <goal name="minmax&#39;vc.6" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.021880" steps="116"/></proof>
  <proof prover="3"><result status="valid" time="0.029553" steps="19314"/></proof>
  </goal>
  <goal name="minmax&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.029793" steps="112"/></proof>
  <proof prover="3"><result status="valid" time="0.075404" steps="24788"/></proof>
  </goal>
  <goal name="minmax&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.027351" steps="154847"/></proof>
  <proof prover="3"><result status="valid" time="0.069023" steps="22427"/></proof>
  </goal>
  <goal name="minmax&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.010221" steps="26"/></proof>
  <proof prover="3"><result status="valid" time="0.061542" steps="20225"/></proof>
  </goal>
  <goal name="minmax&#39;vc.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="minmax&#39;vc.10.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.008421" steps="15"/></proof>
   <proof prover="3"><result status="valid" time="0.044807" steps="19485"/></proof>
   </goal>
   <goal name="minmax&#39;vc.10.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.017716" steps="23"/></proof>
   <proof prover="3"><result status="valid" time="0.055718" steps="21602"/></proof>
   </goal>
   <goal name="minmax&#39;vc.10.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.016209" steps="23"/></proof>
   <proof prover="3"><result status="valid" time="0.046780" steps="21633"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="alphabeta&#39;vc" expl="VC for alphabeta" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="alphabeta&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.011360" steps="244"/></proof>
  <proof prover="2"><result status="valid" time="0.067107" steps="30965"/></proof>
  </goal>
  <goal name="alphabeta&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.022506" steps="16"/></proof>
  <proof prover="2"><result status="valid" time="0.045151" steps="27614"/></proof>
  </goal>
  <goal name="alphabeta&#39;vc.2" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.030102" steps="442"/></proof>
  <proof prover="2"><result status="valid" time="0.066800" steps="32587"/></proof>
  </goal>
  <goal name="alphabeta&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.020846" steps="399"/></proof>
  <proof prover="2"><result status="valid" time="0.072968" steps="32353"/></proof>
  </goal>
  <goal name="alphabeta&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.028976" steps="109"/></proof>
  <proof prover="2"><result status="valid" time="0.075650" steps="29266"/></proof>
  </goal>
  <goal name="alphabeta&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.021563" steps="27"/></proof>
  <proof prover="2"><result status="valid" time="0.046614" steps="29309"/></proof>
  </goal>
  <goal name="alphabeta&#39;vc.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="alphabeta&#39;vc.6.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.022159" steps="198"/></proof>
   <proof prover="2"><result status="valid" time="0.105046" steps="36840"/></proof>
   </goal>
   <goal name="alphabeta&#39;vc.6.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.016064" steps="28"/></proof>
   <proof prover="2"><result status="valid" time="0.058935" steps="29208"/></proof>
   </goal>
   <goal name="alphabeta&#39;vc.6.2" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.689603" steps="9033"/></proof>
   <proof prover="2"><result status="valid" time="0.395799" steps="92750"/></proof>
   </goal>
   <goal name="alphabeta&#39;vc.6.3" expl="precondition" proved="true">
   <proof prover="0" timelimit="5"><result status="valid" time="0.902452" steps="10038"/></proof>
   <proof prover="2"><result status="valid" time="0.180467" steps="41157"/></proof>
   </goal>
   <goal name="alphabeta&#39;vc.6.4" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.022018" steps="28"/></proof>
   <proof prover="2"><result status="valid" time="0.036766" steps="28308"/></proof>
   </goal>
   <goal name="alphabeta&#39;vc.6.5" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.014542" steps="50"/></proof>
   <proof prover="2"><result status="valid" time="0.083951" steps="29388"/></proof>
   </goal>
   <goal name="alphabeta&#39;vc.6.6" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.012867" steps="47"/></proof>
   <proof prover="2"><result status="valid" time="0.069667" steps="29314"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="alphabeta&#39;vc.7" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="alphabeta&#39;vc.7.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="alphabeta&#39;vc.7.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.008195" steps="24"/></proof>
    <proof prover="2"><result status="valid" time="0.089439" steps="29357"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.7.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.026573" steps="31"/></proof>
    <proof prover="2"><result status="valid" time="0.057355" steps="29877"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="alphabeta&#39;vc.7.1" expl="postcondition" proved="true">
   <proof prover="1" timelimit="1"><result status="valid" time="0.029507" steps="54644"/></proof>
   <proof prover="2"><result status="valid" time="0.146807" steps="47108"/></proof>
   </goal>
   <goal name="alphabeta&#39;vc.7.2" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.063315" steps="129290"/></proof>
   <proof prover="2"><result status="valid" time="0.193011" steps="55665"/></proof>
   </goal>
   <goal name="alphabeta&#39;vc.7.3" expl="postcondition" proved="true">
   <proof prover="1" timelimit="1"><result status="valid" time="0.054171" steps="133446"/></proof>
   <proof prover="2"><result status="valid" time="0.214688" steps="58822"/></proof>
   </goal>
   <goal name="alphabeta&#39;vc.7.4" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="alphabeta&#39;vc.7.4.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.010745" steps="31"/></proof>
    <proof prover="2"><result status="valid" time="0.052784" steps="29270"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.7.4.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.031870" steps="293"/></proof>
    <proof prover="2"><result status="valid" time="0.075207" steps="30478"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="alphabeta&#39;vc.7.5" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="alphabeta&#39;vc.7.5.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.042633" steps="87"/></proof>
    <proof prover="2"><result status="valid" time="0.070894" steps="29615"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.7.5.1" expl="postcondition" proved="true">
    <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),min,max,int63&#39;maxInt,zero,one,is_nil,length,(++),minmax&#39;_list_upper_bound,minmax&#39;_list_lower_bound,minmax&#39;_upper_bound,minmax&#39;_lower_bound,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Min_r,Max_l,Min_comm,Max_comm,Min_assoc,Max_assoc,Rounds_toward_zero,Div_1,Mod_1,Div_inf,Mod_inf,Div_mult,Mod_mult,max_int&#39;def,min_int&#39;def,is_nil&#39;spec,Length_nonnegative,Append_assoc,Append_l_nil,int63_max&#39;spec&#39;0,minmax&#39;_list_upper_extend_true,minmax&#39;_list_upper_extend_false,minmax&#39;_list_lower_extend_true,minmax&#39;_list_lower_extend_false,minmax&#39;_list_extendscore_true,minmax&#39;_list_extendscore_false,minmax&#39;_list_infscore_true,minmax&#39;_list_supscore_false,minmax&#39;_list_rev_l,minmax&#39;_list_min_int_lower_bound,minmax&#39;_list_max_int_lower_bound,minmax&#39;_list_spec,minmax&#39;_spec,H8,H4">
     <goal name="alphabeta&#39;vc.7.5.1.0" expl="postcondition" proved="true">
     <proof prover="0" timelimit="10" memlimit="1500"><result status="valid" time="0.509755" steps="3477"/></proof>
     <proof prover="2" timelimit="10" memlimit="1500"><path name="minmax-Top-alphabetaqtvc_2.smt2"/><result status="valid" time="0.315657" steps="46005"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="alphabeta&#39;vc.7.6" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="alphabeta&#39;vc.7.6.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.017129" steps="25"/></proof>
    <proof prover="2"><result status="valid" time="0.061505" steps="29268"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.7.6.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.012310" steps="28"/></proof>
    <proof prover="2"><result status="valid" time="0.070673" steps="29770"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="alphabeta&#39;vc.8" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="alphabeta&#39;vc.8.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.045110" steps="289"/></proof>
   <proof prover="2"><result status="valid" time="0.076931" steps="29823"/></proof>
   </goal>
   <goal name="alphabeta&#39;vc.8.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.069915" steps="523"/></proof>
   <proof prover="2"><result status="valid" time="0.072488" steps="30413"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="alphabeta&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.008455" steps="36"/></proof>
  <proof prover="2"><result status="valid" time="0.084616" steps="27443"/></proof>
  </goal>
  <goal name="alphabeta&#39;vc.10" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.018284" steps="85"/></proof>
  <proof prover="2"><result status="valid" time="0.071947" steps="26479"/></proof>
  </goal>
  <goal name="alphabeta&#39;vc.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.020547" steps="12"/></proof>
  <proof prover="2"><result status="valid" time="0.044301" steps="26034"/></proof>
  </goal>
  <goal name="alphabeta&#39;vc.12" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.026097" steps="63"/></proof>
  <proof prover="2"><result status="valid" time="0.064542" steps="29458"/></proof>
  </goal>
  <goal name="alphabeta&#39;vc.13" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.026300" steps="244"/></proof>
  <proof prover="2"><result status="valid" time="0.077183" steps="30865"/></proof>
  </goal>
  <goal name="alphabeta&#39;vc.14" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.026316" steps="16"/></proof>
  <proof prover="2"><result status="valid" time="0.051615" steps="27621"/></proof>
  </goal>
  <goal name="alphabeta&#39;vc.15" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.016981" steps="450"/></proof>
  <proof prover="2"><result status="valid" time="0.112526" steps="32584"/></proof>
  </goal>
  <goal name="alphabeta&#39;vc.16" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.033663" steps="406"/></proof>
  <proof prover="2"><result status="valid" time="0.077434" steps="32428"/></proof>
  </goal>
  <goal name="alphabeta&#39;vc.17" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.019356" steps="116"/></proof>
  <proof prover="2"><result status="valid" time="0.055621" steps="29284"/></proof>
  </goal>
  <goal name="alphabeta&#39;vc.18" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.009662" steps="27"/></proof>
  <proof prover="2"><result status="valid" time="0.074440" steps="29318"/></proof>
  </goal>
  <goal name="alphabeta&#39;vc.19" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="alphabeta&#39;vc.19.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.033688" steps="123430"/></proof>
   <proof prover="2"><result status="valid" time="0.064997" steps="29209"/></proof>
   </goal>
   <goal name="alphabeta&#39;vc.19.1" expl="precondition" proved="true">
   <proof prover="0" timelimit="5"><result status="valid" time="0.020725" steps="203"/></proof>
   <proof prover="2"><result status="valid" time="0.099879" steps="33321"/></proof>
   </goal>
   <goal name="alphabeta&#39;vc.19.2" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="alphabeta&#39;vc.19.2.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.223406" steps="2218"/></proof>
    <proof prover="2"><result status="valid" time="1.982963" steps="317110"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.19.2.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.937755" steps="10409"/></proof>
    <proof prover="2"><result status="valid" time="0.264394" steps="61612"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="alphabeta&#39;vc.19.3" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.029465" steps="50"/></proof>
   <proof prover="2"><result status="valid" time="0.109168" steps="29387"/></proof>
   </goal>
   <goal name="alphabeta&#39;vc.19.4" expl="precondition" proved="true">
   <proof prover="0" timelimit="5"><result status="valid" time="0.009504" steps="48"/></proof>
   <proof prover="2"><result status="valid" time="0.076007" steps="29311"/></proof>
   </goal>
   <goal name="alphabeta&#39;vc.19.5" expl="precondition" proved="true">
   <proof prover="0" timelimit="5"><result status="valid" time="0.849623" steps="9598"/></proof>
   <proof prover="2"><result status="valid" time="0.209166" steps="54793"/></proof>
   </goal>
   <goal name="alphabeta&#39;vc.19.6" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.008452" steps="8344"/></proof>
   <proof prover="2"><result status="valid" time="0.064158" steps="28311"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="alphabeta&#39;vc.20" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="alphabeta&#39;vc.20.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.021214" steps="58673"/></proof>
   <proof prover="2"><result status="valid" time="0.237898" steps="44328"/></proof>
   </goal>
   <goal name="alphabeta&#39;vc.20.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="alphabeta&#39;vc.20.1.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="10" memlimit="1500"><result status="valid" time="0.023540" steps="24"/></proof>
    <proof prover="1"><result status="valid" time="0.019941" steps="31199"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.20.1.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="10" memlimit="1500"><result status="valid" time="0.025965" steps="31"/></proof>
    <proof prover="1"><result status="valid" time="0.016114" steps="123778"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="alphabeta&#39;vc.20.2" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="alphabeta&#39;vc.20.2.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.017444" steps="76"/></proof>
    <proof prover="2"><result status="valid" time="0.114943" steps="29553"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.20.2.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.000001" steps="27"/></proof>
    <proof prover="2"><result status="valid" time="0.093789" steps="29748"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="alphabeta&#39;vc.20.3" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="alphabeta&#39;vc.20.3.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="5"><result status="valid" time="0.028424" steps="93"/></proof>
    <proof prover="2"><result status="valid" time="0.075319" steps="29633"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.20.3.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="alphabeta&#39;vc.20.3.1.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="alphabeta&#39;vc.20.3.1.0.0" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="0.422711" steps="2765"/></proof>
      <proof prover="2"><result status="valid" time="0.491849" steps="93551"/></proof>
      </goal>
      <goal name="alphabeta&#39;vc.20.3.1.0.1" expl="postcondition" proved="true">
      <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,min,max,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,(!),is_nil,length,mem,is_none,hd,tl,(++),reverse,fold_left,int63_min,int63_max,sub_list,height,height_list,minmax&#39;,minmax&#39;_list,minmax&#39;_list_upper_bound,minmax&#39;_list_lower_bound,minmax&#39;_upper_bound,minmax&#39;_lower_bound,flt,result&#39;unused,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Min_r,Max_l,Min_comm,Max_comm,Min_assoc,Max_assoc,Div_mod,Div_bound,Mod_bound,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_1,Mod_1,Div_inf,Mod_inf,Div_mult,Mod_mult,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,is_nil&#39;spec,Length_nonnegative,Length_nil,is_none&#39;spec,Append_assoc,Append_l_nil,Append_length,mem_decomp,reverse_append,reverse_cons,Reverse_length,fold_left_append,int63_min&#39;spec,int63_min&#39;spec&#39;0,int63_max&#39;spec,int63_max&#39;spec&#39;0,height_list&#39;spec,height&#39;spec,height_list_max,minmax&#39;_list_max_in,mimax&#39;_list_max,minmax&#39;_list_upper_extend_true,minmax&#39;_list_upper_extend_false,minmax&#39;_list_lower_extend_true,minmax&#39;_list_lower_extend_false,minmax&#39;_list_extendscore_true,minmax&#39;_list_extendscore_false,minmax&#39;_list_infscore_true,minmax&#39;_list_supscore_false,minmax&#39;_list_rev_l,minmax&#39;_list_min_int_lower_bound,minmax&#39;_list_max_int_lower_bound,minmax&#39;_list_spec,minmax&#39;_spec,Requires4,H11,H12,Requires3,H,H9,H8,H4,H10,Ensures1,Ensures,H1,H7,H5">
       <goal name="alphabeta&#39;vc.20.3.1.0.1.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="0.027187"><result status="valid" time="0.023299" steps="122"/></proof>
       <proof prover="2"><result status="valid" time="0.026936" steps="6574"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="alphabeta&#39;vc.20.3.1.1" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.022761" steps="32"/></proof>
     <proof prover="2"><result status="valid" time="0.076753" steps="28561"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="alphabeta&#39;vc.20.4" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.270529" steps="44389"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="alphabeta&#39;vc.20.4.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.009330" steps="50235"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.20.4.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.008865" steps="52279"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="alphabeta&#39;vc.20.5" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="alphabeta&#39;vc.20.5.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.029972" steps="87"/></proof>
    <proof prover="2"><result status="valid" time="0.082969" steps="29637"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.20.5.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.024568" steps="27"/></proof>
    <proof prover="2"><result status="valid" time="0.066398" steps="29746"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="alphabeta&#39;vc.20.6" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="alphabeta&#39;vc.20.6.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.026479" steps="25"/></proof>
    <proof prover="2"><result status="valid" time="0.082924" steps="29279"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.20.6.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.036344" steps="279"/></proof>
    <proof prover="2"><result status="valid" time="0.071062" steps="30329"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="alphabeta&#39;vc.21" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="alphabeta&#39;vc.21.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.048399" steps="338"/></proof>
   <proof prover="2"><result status="valid" time="0.102766" steps="29832"/></proof>
   </goal>
   <goal name="alphabeta&#39;vc.21.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.040121" steps="479"/></proof>
   <proof prover="2"><result status="valid" time="0.108237" steps="30414"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="alphabeta&#39;vc.22" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.019021" steps="36"/></proof>
  <proof prover="2"><result status="valid" time="0.084580" steps="27451"/></proof>
  </goal>
  <goal name="alphabeta&#39;vc.23" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.017365" steps="85"/></proof>
  <proof prover="2"><result status="valid" time="0.071885" steps="26487"/></proof>
  </goal>
  <goal name="alphabeta&#39;vc.24" expl="precondition" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="0.009254" steps="12"/></proof>
  <proof prover="2"><result status="valid" time="0.066466" steps="26041"/></proof>
  </goal>
  <goal name="alphabeta&#39;vc.25" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.021131" steps="63"/></proof>
  <proof prover="2"><result status="valid" time="0.085797" steps="29462"/></proof>
  </goal>
  <goal name="alphabeta&#39;vc.26" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="alphabeta&#39;vc.26.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="alphabeta&#39;vc.26.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.013830" steps="18"/></proof>
    <proof prover="2"><result status="valid" time="0.099370" steps="26136"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.26.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.006877" steps="20"/></proof>
    <proof prover="2"><result status="valid" time="0.059372" steps="27435"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.26.0.2" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.011648" steps="20"/></proof>
    <proof prover="2"><result status="valid" time="0.075828" steps="27442"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="alphabeta&#39;vc.26.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="alphabeta&#39;vc.26.1.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.012736" steps="16"/></proof>
    <proof prover="2"><result status="valid" time="0.079211" steps="26164"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.26.1.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.000001" steps="20"/></proof>
    <proof prover="2"><result status="valid" time="0.054910" steps="27438"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.26.1.2" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.012135" steps="20"/></proof>
    <proof prover="2"><result status="valid" time="0.045443" steps="27445"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="alphabeta&#39;vc.26.2" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="alphabeta&#39;vc.26.2.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.022095" steps="30"/></proof>
    <proof prover="2"><result status="valid" time="0.095089" steps="27126"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.26.2.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.022476" steps="56"/></proof>
    <proof prover="2"><result status="valid" time="0.108948" steps="30459"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.26.2.2" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.023894" steps="55"/></proof>
    <proof prover="2"><result status="valid" time="0.122706" steps="30475"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="alphabeta&#39;vc.26.3" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="alphabeta&#39;vc.26.3.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="5"><result status="valid" time="0.027646" steps="69"/></proof>
    <proof prover="2"><result status="valid" time="0.088653" steps="27262"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.26.3.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="5"><result status="valid" time="0.022465" steps="54"/></proof>
    <proof prover="2"><result status="valid" time="0.091781" steps="30834"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.26.3.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="5"><result status="valid" time="0.030566" steps="54"/></proof>
    <proof prover="2"><result status="valid" time="0.100614" steps="30849"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="alphabeta&#39;vc.26.4" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="alphabeta&#39;vc.26.4.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.006078" steps="16"/></proof>
    <proof prover="2"><result status="valid" time="0.085186" steps="26172"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.26.4.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.000001" steps="18"/></proof>
    <proof prover="2"><result status="valid" time="0.047850" steps="27438"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.26.4.2" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.011519" steps="18"/></proof>
    <proof prover="2"><result status="valid" time="0.063508" steps="27445"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="alphabeta&#39;vc.26.5" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="alphabeta&#39;vc.26.5.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="5"><result status="valid" time="0.023284" steps="49"/></proof>
    <proof prover="2"><result status="valid" time="0.092008" steps="27282"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.26.5.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="5"><result status="valid" time="0.027648" steps="54"/></proof>
    <proof prover="2"><result status="valid" time="0.119326" steps="30811"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.26.5.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="5"><result status="valid" time="0.026187" steps="54"/></proof>
    <proof prover="2"><result status="valid" time="0.109422" steps="30855"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="alphabeta&#39;vc.26.6" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="alphabeta&#39;vc.26.6.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.014401" steps="16"/></proof>
    <proof prover="2"><result status="valid" time="0.074715" steps="26176"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.26.6.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.015405" steps="18"/></proof>
    <proof prover="2"><result status="valid" time="0.060573" steps="27435"/></proof>
    </goal>
    <goal name="alphabeta&#39;vc.26.6.2" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.013071" steps="18"/></proof>
    <proof prover="2"><result status="valid" time="0.063127" steps="27442"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="alphabeta&#39;vc.27" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.026327" steps="49"/></proof>
  <proof prover="2"><result status="valid" time="0.126128" steps="30904"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
